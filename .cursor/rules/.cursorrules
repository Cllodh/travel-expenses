# Cursor項目規範

## 基本設置
- 使用繁體中文回答所有問題
- 按照Sequential Thinking方法進行代碼設計和實現

## 項目結構和命名規範
- 組件命名：PascalCase
- 函數命名：camelCase
- 常量命名：UPPER_CASE
- 文件夾結構遵循：/src/components, /src/services, /src/utils, /docs
- 接口命名：使用I前綴，如IUserService
- 類型定義：使用T前綴，如TUserData

## 代碼風格
- 使用TypeScript類型定義
- 統一代碼縮進和格式
- 使用ESLint和Prettier規則

## 開發流程規則
1. 問題分析：明確任務目標和約束條件
2. 設計方案：設計數據結構和算法
3. 實現步驟：自頂向下實現功能
4. 測試驗證：編寫單元測試和集成測試

## 代碼審查標準
- 代碼必須符合既定規範
- 關鍵函數和組件必須有注釋
- 覆雜算法需要解釋思路

## 提交規範
- 遵循語義化提交信息格式：feat:, fix:, docs:等
- 主分支只接受經過測試的代碼

## 文檔要求
- API接口必須有清晰文檔
- 更新README文件反映最新項目狀態

## 代碼穩定性保障
- 修改已完成功能前必須先理解其完整設計意圖
- 所有API更改必須向下兼容
- 使用單元測試保護核心功能邏輯
- 重構代碼時必須保持功能等價性
- 在修改前創建功能快照或臨時分支
- 每次更改後必須驗證不破壞現有功能
- 使用TODO或FIXME標簽清晰標記未完成修改

## 版本控制規則
- 使用語義化版本管理
- 關鍵功能更改必須通過代碼審查
- 維護變更日志記錄所有修改
- 為已穩定功能模塊添加"鎖定注釋"標記：/* @stable - 請勿修改 */

## UI設計規範
- 遵循現代設計趨勢和最佳實踐
- 使用設計系統確保一致性（如Material Design、Ant Design或自定義設計系統）
- 實現響應式設計，確保在不同設備上顯示良好
- 使用CSS變量統一管理顏色、字體、間距等設計標記
- 優先采用Flexbox或Grid布局系統
- 確保適當的留白和視覺層次
- 實現無障礙訪問標準（WCAG 2.1）

## UI組件標準
- 使用組件庫作為基礎（如MUI、Chakra UI、Tailwind UI等）
- 自定義組件需符合現代設計審美
- 設計組件應包含默認、懸停、聚焦、禁用等狀態
- 使用適當的動畫和過渡效果增強用戶體驗
- 確保設計一致性：同類元素使用相同樣式
- 使用主題系統支持亮色/暗色模式切換
- 根據用戶操作提供視覺反饋

## 設計資源
- 維護設計風格指南和UI組件庫
- 使用標準化圖標庫（如Heroicons、Material Icons等）
- 圖片和插圖需保持一致的風格
- 顏色選擇須符合品牌標識並確保足夠對比度

## 依賴管理規範
- 優先使用國內鏡像站點安裝依賴
- npm包使用淘寶鏡像：https://registry.npmmirror.com/
- yarn設置：yarn config set registry https://registry.npmmirror.com
- pnpm設置：pnpm config set registry https://registry.npmmirror.com
- pip包使用清華鏡像：https://pypi.tuna.tsinghua.edu.cn/simple
- Docker鏡像使用阿里雲：https://cr.console.aliyun.com/
- Maven依賴使用阿里雲：https://maven.aliyun.com/repository/public
- Gradle依賴使用阿里雲：https://developer.aliyun.com/mvn/guide
- 安裝新依賴前先驗證其在國內是否可訪問
- 如確實需使用國外資源，應提供備選方案或離線安裝包
- package.json中添加鏡像設置腳本便於團隊統一配置
- 記錄所有依賴的具體版本和來源以便追蹤

## 測試自動化規範
- 編寫單元測試覆蓋所有關鍵功能
- 實現端到端測試驗證用戶流程
- 使用測試驅動開發(TDD)方法
- 每次提交前運行自動化測試
- 維護測試數據與生產環境隔離

## 調試與日志規範
- 統一使用日志級別（error, warn, info, debug）
- 日志信息需包含上下文和時間戳
- 生產環境禁用調試代碼和console語句
- 關鍵流程增加日志記錄點便於問題追蹤
- 使用結構化日志格式便於分析

## 代碼覆雜度控制
- 函數不超過50行，單個文件不超過300行
- 每個函數只做一件事情，保持單一職責
- 嵌套不超過3層，避免過深條件嵌套
- 控制圈覆雜度不超過10
- 覆雜邏輯應拆分為多個小函數

## 狀態管理規範
- 明確狀態管理方案（如Redux、MobX或Context API）
- 區分本地狀態和全局狀態
- 避免狀態冗余和重覆存儲
- 實現不可變狀態更新模式
- 為覆雜狀態提供初始值和驗證機制

## 異步操作規範
- 統一使用async/await或Promise
- 實現請求超時和重試機制
- 處理並發請求限制
- 取消不必要的請求以節省資源
- 使用Loading狀態指示異步操作進行中

## 代碼重用策略
- 提取通用邏輯為Hooks或工具函數
- 使用組合而非繼承實現代碼覆用
- 避免覆制粘貼代碼，而應重構為共享組件
- 通用功能應考慮發布為內部npm包
- 明確區分業務邏輯和技術實現

## 項目文檔體系
- 維護項目架構圖和關鍵流程圖
- 記錄技術選型理由和限制條件
- 為API和數據模型提供詳細文檔
- 記錄已知問題和解決方案
- 提供新開發者入門指南

## 構建與發布流程
- 使用CI/CD實現自動化構建和部署
- 區分開發、測試、預發布和生產環境
- 實現回滾機制應對緊急問題
- 使用版本化靜態資源避免緩存問題
- 配置文件應隨環境變化而不需修改代碼

## 可訪問性和兼容性規範
- 確保鍵盤可訪問性
- 使用ARIA標簽增強屏幕閱讀器支持
- 確保適當的顏色對比度
- 響應式設計支持從移動到桌面的所有設備
- 針對低帶寬和弱網絡場景優化

## 問題追蹤與修覆流程
- 使用標準化的問題報告模板
- 問題修覆前先編寫覆現步驟
- 每個bug修覆應包含相應測試避免回歸
- 重大問題需進行根本原因分析
- 定期審查常見錯誤類型並改進開發流程

## 代碼注釋最佳實踐
- 寫清楚為什麽這樣做，而不僅是做了什麽
- 用注釋標記未來需要優化的地方
- 所有公共API必須有注釋文檔
- 覆雜業務邏輯需要解釋業務規則
- 避免廢棄或過時的注釋

## 數據處理與安全
- 敏感數據傳輸必須加密
- 用戶輸入必須驗證和清洗
- 實現數據備份和恢覆策略
- 遵循數據最小化原則，只收集必要信息
- 實現適當的數據過期和銷毀機制

## 性能優化指南
- 實現資源懶加載和按需加載
- 優化關鍵渲染路徑提高首屏加載速度
- 使用適當的緩存策略減少網絡請求
- 批量處理DOM操作避免重排和重繪
- 定期進行性能審計和優化

## 可維護性原則
- 優先考慮代碼可理解性而非簡潔性
- 避免過早優化和不必要的抽象
- 關鍵決策需在代碼中記錄理由
- 避免使用黑魔法和難以理解的技巧
- 團隊培訓和知識共享機制

## 技術債務管理
- 使用TODO和FIXME標記需要改進的地方
- 定期安排時間清理技術債務
- 新功能實現前評估現有代碼質量
- 記錄所有已知問題和臨時解決方案
- 使用代碼質量工具定期評估項目健康度

## 用戶體驗設計規範
- 所有操作必須提供用戶反饋
- 錯誤信息應該清晰並提供解決方案
- 降低操作覆雜度，減少用戶認知負擔
- 界面風格保持一致性
- 考慮邊緣情況和用戶出錯恢覆路徑
